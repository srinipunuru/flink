# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

trigger: none


resources:
  containers:
  # Container with Maven 3.2.5, SSL to have the same environment everywhere.
  - container: flink-build-container
    image: rmetzger/flink-ci:ubuntu-amd64-02878c6
    # On AZP provided machines, set this flag to allow writing coredumps in docker
    options: --privileged


variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  E2E_CACHE_FOLDER: $(Pipeline.Workspace)/e2e_cache
  E2E_TARBALL_CACHE: $(Pipeline.Workspace)/e2e_artifact_cache
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  CACHE_KEY: maven | $(Agent.OS) | **/pom.xml, !**/target/**
  CACHE_FALLBACK_KEY: maven | $(Agent.OS)
  DOCKER_IMAGES_CACHE_KEY: docker-images-cache | $(Agent.OS) | **/cache_docker_images.sh | flink-test-utils-parent/**/DockerImageVersions.java
  DOCKER_IMAGES_CACHE_FOLDER: $(Pipeline.Workspace)/.docker-cache
  FLINK_ARTIFACT_DIR: $(Pipeline.Workspace)/flink_artifact
  SECRET_S3_BUCKET: $[variables.IT_CASE_S3_BUCKET]
  SECRET_S3_ACCESS_KEY: $[variables.IT_CASE_S3_ACCESS_KEY]
  SECRET_S3_SECRET_KEY: $[variables.IT_CASE_S3_SECRET_KEY]
  SECRET_GLUE_SCHEMA_ACCESS_KEY: $[variables.IT_CASE_GLUE_SCHEMA_ACCESS_KEY]
  SECRET_GLUE_SCHEMA_SECRET_KEY: $[variables.IT_CASE_GLUE_SCHEMA_SECRET_KEY]
  tag: '$(Build.SourceBranchName)-$(Build.BuildId)'

stages:
  - stage: Tests
    displayName: "Build and Test (custom builders)"
    condition: not(eq(variables['Build.Reason'], in('Schedule', 'Manual')))
    jobs:
      - template: jobs-template.yml
        parameters:
          stage_name: ci
          test_pool_definition:
            # name: Default
            vmImage: 'ubuntu-20.04'
          e2e_pool_definition:
            vmImage: 'ubuntu-20.04'
          environment: PROFILE="-Dhadoop.version=2.8.3 -Dinclude_hadoop_aws -Dscala-2.11"
          run_end_to_end: false
          container: flink-build-container
          jdk: 8
  - stage: ContainerBuildPush
    displayName: "Build and Push the container image"
    dependsOn: [] # depending on an empty array makes the stages run in parallel
    condition: not(eq(variables['Build.Reason'], in('Schedule', 'Manual')))
    jobs:
      - template: li-build-push-image.yml
        parameters:
          stage_name: build_push_container_image
          environment: PROFILE=""
          container: flink-build-container
  - stage: DeployToAKS
    displayName: Deploy to AKS
    dependsOn: [ContainerBuildPush] # depending on an empty array makes the stages run in parallel
    condition: not(eq(variables['Build.Reason'], in('Schedule', 'Manual')))
    jobs:
    - deployment:
      displayName: Deploy to AKS
      pool:
        vmImage: ubuntu-latest
      environment: 'aks.aks'
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - task: KubernetesManifest@0
              displayName: Delete flink-taskmanager 
              continueOnError: true
              inputs:
                action: delete
                arguments: deployment flink-taskmanager 
            - task: KubernetesManifest@0
              displayName: Delete flink-jobmanager 
              continueOnError: true
              inputs:
                action: delete
                arguments: deployment flink-jobmanager 
            - task: KubernetesManifest@0
              displayName: Delete azure-file1 
              continueOnError: true
              inputs:
                action: delete
                arguments: pvc azure-file1  
            - task: KubernetesManifest@0
              displayName: Delete azure-file2
              continueOnError: true
              inputs:
                action: delete
                arguments: pvc azure-file2
            - task: KubernetesManifest@0
              displayName: Delete flink-config
              continueOnError: true
              inputs:
                action: delete
                arguments: ConfigMap flink-config 
            - task: KubernetesManifest@0
              displayName: Create secret
              inputs: 
                action: createSecret
                namespace: aks
                secretType: dockerRegistry
                secretName: acr-creds
                dockerRegistryEndpoint: acrdocker
                secretArguments: --docker-server=flinkhilotest.azurecr.io --docker-username=FlinkHiloTest --docker-password=BNpw+OZbVXt3lRFTvWBQy9jx26HcysoS
            
            - task: KubernetesManifest@0
              displayName: Create the first Persistent volume claimset. This creates the pvc which is then used in both job manager and task manager as shared storage for storing checkpoints, savepoints etc
              inputs:
                action: deploy
                namespace: aks
                manifests: |
                  flink-yaml/flink-1.12/session-cluster/pvc.yaml    
            - task: KubernetesManifest@0
              displayName: Create the second Persistent volume claimset. This creates the pvc which is then used in both job manager and task manager as shared storage for storing checkpoints, savepoints etc
              inputs:
                action: deploy
                namespace: aks
                manifests: |
                  flink-yaml/flink-1.12/session-cluster/pvc2.yaml    

            - task: KubernetesManifest@0
              displayName: apply flink config map
              inputs:
                action: deploy
                namespace: aks
                manifests: |
                  flink-yaml/flink-1.12/flink-configuration-configmap.yaml 

            - task: KubernetesManifest@0
              displayName:  create job manager service
              inputs:
                action: deploy
                namespace: aks
                manifests: |
                  flink-yaml/flink-1.12/jobmanager-service.yaml 
            - script: |
                envsubst < flink-yaml/flink-1.12/session-cluster/jobmanager-session-deployment.yaml  | tee flink-yaml/flink-1.12/jobmanager-session-deployment.yaml.tmp
              displayName: Generate modified yaml for jobmanager-session-deployment

            - task: KubernetesManifest@0
              displayName:  create Job manager deployment
              inputs:
                action: deploy
                namespace: aks
                manifests: |
                 flink-yaml/flink-1.12/jobmanager-session-deployment.yaml.tmp

            - script: |
                rm  flink-yaml/flink-1.12/jobmanager-session-deployment.yaml.tmp
              displayName: Delete modified yaml for jobmanager-session-deployment

            - script: |
                envsubst < flink-yaml/flink-1.12/session-cluster/taskmanager-session-deployment.yaml |tee flink-yaml/flink-1.12/session-cluster/taskmanager-session-deployment.yaml.tmp
              displayName: Generate modified yaml for taskmanager-session-deployment


            - task: KubernetesManifest@0
              displayName:  create Task manager deployment
              inputs:
                action: deploy
                namespace: aks
                manifests: |
                  flink-yaml/flink-1.12/session-cluster/taskmanager-session-deployment.yaml.tmp

            - script: |
                rm flink-yaml/flink-1.12/session-cluster/taskmanager-session-deployment.yaml.tmp
              displayName: Delete modified yaml for taskmanager-session-deployment

            - task: KubernetesManifest@0
              displayName: Create Jobmanager rest service so that you can access the rest service from outside the aks cluster
              inputs:
                action: deploy
                namespace: aks
                manifests: |
                  flink-yaml/flink-1.12/opt/jobmanager-rest-service.yaml 
                containers: |
                    flinkhilotest.azurecr.io/liflink:$(tag)
                imagePullSecrets: |
                    acr-creds


