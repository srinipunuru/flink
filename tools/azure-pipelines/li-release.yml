# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

trigger: none
resources:
  containers:
  # Container with Maven 3.2.5, SSL to have the same environment everywhere.
  - container: flink-build-container
    image: rmetzger/flink-ci:ubuntu-amd64-02878c6
    # On AZP provided machines, set this flag to allow writing coredumps in docker
    options: --privileged


variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  E2E_CACHE_FOLDER: $(Pipeline.Workspace)/e2e_cache
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  CACHE_KEY: maven | $(Agent.OS) | **/pom.xml, !**/target/**
  CACHE_FALLBACK_KEY: maven | $(Agent.OS)
  OCKER_IMAGES_CACHE_KEY: docker-images-cache | $(Agent.OS) | **/cache_docker_images.sh | flink-test-utils-parent/**/DockerImageVersions.java
  DOCKER_IMAGES_CACHE_FOLDER: $(Pipeline.Workspace)/.docker-cache
  FLINK_ARTIFACT_DIR: $(Pipeline.Workspace)/flink_artifact
  SECRET_S3_BUCKET: $[variables.IT_CASE_S3_BUCKET]
  SECRET_S3_ACCESS_KEY: $[variables.IT_CASE_S3_ACCESS_KEY]
  SECRET_S3_SECRET_KEY: $[variables.IT_CASE_S3_SECRET_KEY]
  SECRET_GLUE_SCHEMA_ACCESS_KEY: $[variables.IT_CASE_GLUE_SCHEMA_ACCESS_KEY]
  SECRET_GLUE_SCHEMA_SECRET_KEY: $[variables.IT_CASE_GLUE_SCHEMA_SECRET_KEY]

stages:
  - stage: Library_Release
    displayName: "Library Release"
    dependsOn: []
    condition: not(eq(variables['Build.Reason'], in('Schedule', 'Manual')))
    jobs:
    - job: Flink_library_release
      timeoutInMinutes: 120
      pool:
        vmImage: 'ubuntu-20.04'
      container: flink-build-container
      workspace:
        clean: all
      steps:
# if on Azure, free up disk space
      - script: ./tools/azure-pipelines/free_disk_space.sh
        target: host
        displayName: Free up disk space
# The cache task is persisting the .m2 directory between builds, so that
# we do not have to re-download all dependencies from maven central for 
# each build. The hope is that downloading the cache is faster than
# all dependencies individually.
# In this configuration, we use a hash over all committed (not generated) .pom files 
# as a key for the build cache (CACHE_KEY). If we have a cache miss on the hash
# (usually because a pom file has changed), we'll fall back to a key without
# the pom files (CACHE_FALLBACK_KEY).
# Offical documentation of the Cache task: https://docs.microsoft.com/en-us/azure/devops/pipelines/caching/?view=azure-devops
      - task: Cache@2
        inputs:
          key: $(CACHE_KEY)
          restoreKeys: $(CACHE_FALLBACK_KEY)
          path: $(MAVEN_CACHE_FOLDER)
        continueOnError: true # continue the build even if the cache fails.
        displayName: Cache Maven local repo

      - script: |
          echo "Setting up Maven"
          source ./tools/ci/maven-utils.sh
          source ./tools/ci/li-utils.sh
          setup_maven
        env:
          LI_MIN_VERSION: $(MIN_VERSION)

      # Release to jfrog
      - script: |
          chmod 766 ./tools/ci/li-release-lib.sh
          PROFILE="-Dhadoop.version=2.8.3 " ./tools/ci/li-release-lib.sh || exit $?
        env:
          JFROG_USERNAME_ENV: $(jfrog_username)
          JFROG_PASSWORD_ENV: $(jfrog_password)
          LI_MIN_VERSION: $(MIN_VERSION)
        displayName: Release library
    
  - stage: Container_Image_Release
    displayName: "Container Image Release"
    dependsOn: [] 
    condition: not(eq(variables['Build.Reason'], in('Schedule', 'Manual')))
    jobs:
    - job: Container_Image_Release
      timeoutInMinutes: 120
      pool:
        vmImage: 'ubuntu-20.04'
      container: flink-build-container
      workspace:
        clean: all
      steps:
      - task: Bash@3
        displayName: Create binary
        name: create_binary
        env:
          LI_MIN_VERSION: $(MIN_VERSION)
        inputs:
          targetType: 'incline'
          script: |
            source ./tools/ci/maven-utils.sh
            source ./tools/ci/li-utils.sh
            setup_maven
            run_mvn -version
            export MVN="run_mvn"
            export RELEASE_VERSION=$(MVN_RUN_VERBOSE=false run_mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            echo "Determined RELEASE_VERSION as '$RELEASE_VERSION' "
            getBuildVersion
            echo "##vso[task.setvariable variable=LI_RELEASE_VERSION]$BUILD_VERSION"
            cd tools 
            MVN_RUN_VERBOSE=true SKIP_GPG=true ./releasing/create_binary_release.sh
        
            echo "Created files:"
            find ./releasing/release
            echo "Copying to docker folder:"
            cp ./releasing/release/flink-$RELEASE_VERSION-bin-scala_2.11.tgz ../docker/flink.tgz
            cd ..  
          displayName: Generate binary for docker build
      # Publish the binary release as a pipeline artifact on ADO
      - task: PublishPipelineArtifact@1
        displayName: Upload snapshot binary release
        inputs:
          targetPath: ./tools/releasing/release
          artifact: release
        
      - task: Docker@2
        displayName: Build and release an image
        inputs:
          containerRegistry: 'acrdocker'
          repository: 'LiFlink'
          command: 'buildAndPush'
          Dockerfile: '$(Build.SourcesDirectory)/docker/Dockerfile'
          tags: |
            RE-$(LI_RELEASE_VERSION)
            

  - stage: final
    displayName: "Tagging and reporting"
    dependsOn: [Library_Release, Container_Image_Release]
    condition: succeeded()
    jobs:
    - job: tagging
      timeoutInMinutes: 120
      pool:
        vmImage: 'ubuntu-20.04'
      container: flink-build-container
      workspace:
        clean: all
      steps:
      - task: Bash@3
        displayName: Get Version
        name: getVersion
        env:
          LI_MIN_VERSION: $(MIN_VERSION)
        inputs:
          targetType: 'incline'
          script: |
            source ./tools/ci/li-utils.sh
            getBuildVersion
            echo "##vso[task.setvariable variable=LI_RELEASE_VERSION]$BUILD_VERSION"
      - task: git-tag-on-release-task@9
        displayName: "Add Tag to git"
        inputs:
          staticTagName: 'RELEASE-$(LI_RELEASE_VERSION)'
    - job: send_email    
      pool:
        vmImage: 'windows-latest'
      steps:
      - task: Bash@3
        displayName: Get Version
        name: getVersion
        env:
          LI_MIN_VERSION: $(MIN_VERSION)
        inputs:
          targetType: 'incline'
          script: |
            source ./tools/ci/li-utils.sh
            getBuildVersion
            echo "##vso[task.setvariable variable=LI_RELEASE_VERSION]$BUILD_VERSION"



          
    